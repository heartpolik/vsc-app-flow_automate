import * as vscode from 'vscode';
import { getCurrentBranchName } from './git';
import { SimpleGit } from 'simple-git';
import { Gitlab } from '@gitbeaker/rest';
import { Config } from '../Config';

export type mrResponce = {
  url: string;
  sourceBranch: string;
  targetBranch: string;
  repoName: string;
}
/**
 * –°—Ç–≤–æ—Ä—é—î merge request
 */
export async function createMergeRequest(repo: SimpleGit, targetBranch: string, isProduction = false): Promise<mrResponce> {
  const currentBranch = await getCurrentBranchName(repo);
  if (!currentBranch || currentBranch === targetBranch) {
    throw new Error(`Fail to create MR ${currentBranch}->${targetBranch}`);
  }

  const origin = await repo.remote(['get-url', 'origin']);
  if (!origin) throw new Error('Unable to resolve origin URL');

  const projectId = await resolveGitLabProjectId(origin);

  // üõ† –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –ø–æ—Ç–æ—á–Ω–∞ –≥—ñ–ª–∫–∞ –∑–∞–ø—É—à–µ–Ω–∞
  const remoteBranches = await repo.branch(['-r']);
  const remoteBranchFullName = `origin/${currentBranch}`;
  if (!remoteBranches.all.includes(remoteBranchFullName)) {
    const confirm = await vscode.window.showWarningMessage(
      `–ì—ñ–ª–∫–∞ '${currentBranch}' —â–µ –Ω–µ –∑–∞–ø—É—à–µ–Ω–∞. –ó–∞–ø—É—à–∏—Ç–∏ –∑–∞—Ä–∞–∑?`,
      '–¢–∞–∫', '–°–∫–∞—Å—É–≤–∞—Ç–∏'
    );
    if (confirm !== '–¢–∞–∫') throw new Error('–°—Ç–≤–æ—Ä–µ–Ω–Ω—è MR —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º');

    await repo.push(['-u', 'origin', currentBranch]);
  }

  try {
    const api = new Gitlab({
      host: Config.read.gitlabUrl,
      token: Config.read.gitlabToken,
    });
    const repoName = (await api.Projects.show(projectId)).name;
    const mr = await api.MergeRequests.create(projectId, currentBranch, targetBranch, `Merge ${currentBranch} into ${targetBranch}`, {
      removeSourceBranch: !isProduction,
      squash: isProduction,
    });

    return {
      url: mr.web_url,
      sourceBranch: currentBranch,
      targetBranch,
      repoName,
    };
  } catch (error: any) {
    if (error.response?.status === 400) {
      throw new Error('MR already exists');
    } else {
      throw new Error(`GitLab API error: ${error.message}`);
    }
  }
}

/**
 * –í–∏–∑–Ω–∞—á–∞—î project ID GitLab –ø—Ä–æ—î–∫—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
 */
async function resolveGitLabProjectId(origin: string): Promise<number> {
  const match = origin.trim().match(/[:\/]([^\/:]+\/[^\/.]+)(?:\.git)?$/);
  if (!match || !match[1]) {
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ GitLab remote path —ñ–∑ URL: ' + origin);
  }
  const api = new Gitlab({
    host: Config.read.gitlabUrl,
    token: Config.read.gitlabToken,
  });
  const project = await api.Projects.show(match[1]);
  return project.id;
}